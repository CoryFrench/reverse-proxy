events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Upstream definitions
    upstream chatgpt_daily {
        server chatgpt-daily-app:14000;
    }

    upstream agent_directory {
        server agent-directory-app:14100;
    }

    upstream calendar_backend {
        server calendar-backend-app:14200;
    }

    upstream youtube_summary {
        server youtube-summary-app:14300;
    }

    upstream send_email {
        server send-email-app:14500;
    }
    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Health check for the reverse proxy itself
        location /health {
            # API Key validation
            if ($http_x_api_key != "${API_KEY}") {
                return 401 "Unauthorized: Invalid API Key";
            }
            
            access_log off;
            return 200 "Reverse Proxy is healthy\n";
            add_header Content-Type text/plain;
        }

        # Route ChatGPT Daily GPT Server
        location /api/chatgpt-daily/ {
            # API Key validation
            if ($http_x_api_key != "${API_KEY}") {
                return 401 "Unauthorized: Invalid API Key";
            }
            
            proxy_pass http://chatgpt_daily/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Remove the /api/chatgpt-daily prefix when forwarding
            rewrite ^/api/chatgpt-daily/(.*)$ /$1 break;
        }

        # Route Agent Directory
        location /api/agent-directory/ {
            proxy_pass http://agent_directory/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            rewrite ^/api/agent-directory/(.*)$ /$1 break;
        }

        # Handle agent directory login redirects
        location /login {
            proxy_pass http://agent_directory/login;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Handle agent directory main page after login
        location /directory {
            proxy_pass http://agent_directory/directory;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Handle agent directory logout
        location /logout {
            proxy_pass http://agent_directory/logout;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Handle agent directory admin page
        location /admin {
            proxy_pass http://agent_directory/admin;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Handle agent directory assets
        location /assets/ {
            proxy_pass http://agent_directory/assets/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Handle agent directory JavaScript files
        location /js/ {
            proxy_pass http://agent_directory/js/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Handle agent directory CSS files
        location /css/ {
            proxy_pass http://agent_directory/css/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Route Calendar Backend API
        location /api/calendar-backend/ {
            # API Key validation
            if ($http_x_api_key != "${API_KEY}") {
                return 401 "Unauthorized: Invalid API Key";
            }
            
            proxy_pass http://calendar_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            rewrite ^/api/calendar-backend/(.*)$ /$1 break;
        }

        # Route Calendar Backend API (shorter route)
        location /api/calendar/ {
            # API Key validation
            if ($http_x_api_key != "${API_KEY}") {
                return 401 "Unauthorized: Invalid API Key";
            }
            
            proxy_pass http://calendar_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            rewrite ^/api/calendar/(.*)$ /$1 break;
        }

        # Direct route for availability endpoints (used by frontend)
        location /api/availability/ {
            # API Key validation
            if ($http_x_api_key != "${API_KEY}") {
                return 401 "Unauthorized: Invalid API Key";
            }
            
            proxy_pass http://calendar_backend/api/availability/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Direct route for bookings endpoints (used by frontend)
        location /api/bookings/ {
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,X-API-Key';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # API Key validation
            if ($http_x_api_key != "${API_KEY}") {
                return 401 "Unauthorized: Invalid API Key";
            }
            
            proxy_pass http://calendar_backend/api/bookings/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Route YouTube Summary Service
        location /api/youtube-summary/ {
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,X-API-Key';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # API Key validation
            if ($http_x_api_key != "${API_KEY}") {
                return 401 "Unauthorized: Invalid API Key";
            }
            
            proxy_pass http://youtube_summary/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            rewrite ^/api/youtube-summary/(.*)$ /$1 break;
        }

        # Route Send Email Service
        location /api/send-email/ {
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,X-API-Key';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # API Key validation
            if ($http_x_api_key != "${API_KEY}") {
                return 401 "Unauthorized: Invalid API Key";
            }
            
            proxy_pass http://send_email/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            rewrite ^/api/send-email/(.*)$ /$1 break;
        }

        # Default route - redirect to agent directory
        location / {
            proxy_pass http://agent_directory/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
} 